VYT Language Specification
Version: 0.1.0
Revised: September 3, 2023 (Sunday)

This document contains the specification of the VYT Language. You can found all
the revisions of this specification including the source code of the project at
the official repository on GitHub:

    https://github.com/vytdev/vytlang

Copyright (c) 2023 VYT. This project is under the MIT License. You can obtain a
copy of this license at the link above.


I. Introduction
--------------------------------------------------------------------------------

Introducing a programming language that's as versatile as it is innovative,
designed to empower developers with a multitude of programming paradigms and
fine-grained control. This language embodies the belief that programming languages
should offer flexibility, power, and adaptability across a broad spectrum of
applications.

In this world, you'll uncover an array of powerful features:

  - Object-Oriented:
    Harness the power of object-oriented design to craft modular and reusable code.
  - Prototype-Based:
    Embrace the elegance of prototype-based programming, allowing for dynamic
    object creation and extension.
  - Type Safety:
    Write code with confidence, thanks to a robust type system that detects
    errors at compile time.
  - Functional:
    Explore functional programming paradigms for concise and expressive solutions
    to complex problems.
  - Procedural:
    Craft efficient procedural code when structured and straightforward solutions
    are called for.
  - Low-Level Control:
    For the performance enthusiasts, this language offers fine-grained control
    over memory management and resource optimization.

With this language, there are no constraints on your creativity; it amplifies
it. As you embark on your journey, you'll discover a world of possibilities, a
welcoming community of like-minded developers, and a language that adapts to your
unique needs. Whether you're developing web applications, system software,
data-intensive solutions, or venturing into uncharted territories, it will be
your trusted companion.

Welcome to a new era of programming. Welcome to this innovative language.


II. Syntax
--------------------------------------------------------------------------------

This section describe the fundamental rules and structure of this language. It
defines how programs are organized, how statements are constructed, and conventions
for writing code in this language.

Here are the basic syntax of the language:

 a) Comments:
    Comments are really important in programming languages, as it is used to
    describe or disable the part of a code. This language uses the comment syntax
    from most of the popular programming languages, and we support two types of
    comments: single-line and multi-line. Heres how to use them:
    
    To create a single-line comment, write double slash '//' in your code:
    
        // comment here
    
    Single line comments allows you to write anything after the double slash until
    the compiler found a new line character. Multi-line comments are different
    as it can be wrapped over multiple lines. It can be created by writting a
    forward slash followed by an asterisk:
    
        /* comment here */
    
        /* this comment
        can be wrapped around
        multiple-lines! */
    
    To specify the end of a multi-line comment, write an asterisk followed by a
    forward slash. Comments in this language can't be nested, so writting the
    following will produce a syntax error:
    
        /* /* your comment */ */
    
